// create a package containing content at specified absolute paths
Nest.create().add(file).add(dir).pack();


// define aliases for paths that later will be used as relative-to paths
Nest.create()
.nameSourceLocation(name, path)
.nameSourceLocation(name, srcLocationName, path) // define alias for a path relative an existing alias
.addLocation(srcLocationName)
.addLocation(srcLocationName, relativePath)
.add(absolutePath)
.pack();


// if relevant for the packaging format, specify the location under which the entry should be stored inside the package
Nest.create()
.add(file).under(nestPath)
.add(dir)
.pack();


// define aliases for paths inside the package
Nest.create()
.nameNestLocation(name, path)
.nameNestLocation(name, nestLocationName, path) // alias for a path relative ab existing alias
.add(file).underLocation(nestLocationName) // store file under specified alias
.add(file).under(nestLocationName, path) // store file under path relative to an alias
.pack();


// specifying where to unpack
Nest.create()
.nameUnpackLocation(name)
.nameUnpackLocation(name, unpackLocationName, path)  // alias for a path relative to existing alias
.add(file).unpackToLocation(alias)  // unpack under the alias
.add(file).unpackToLocation(targetAlias, path)  // unpack under path relative to an alias
.pack();


// Unpacking

Nest.open(path).unpack();  // in case target aliases where not specified

// defining required aliases
Nest.open(path)
.linkUnpackLocation(name, path)
.unpack();

// default root
Nest.open(path).linkUnpackLocation(name, path).unpack(defaultRoot);
